%% MATLAB/EEGLAB Comparison Tests Script
%% =====================================
%%
%% This script runs EEGLAB functions on the same test data used by Katharsis
%% to generate comparison results. Run this script after generating test data
%% with the Python test_matlab_comparison.py script.
%%
%% Requirements:
%% - MATLAB with Signal Processing Toolbox
%% - EEGLAB installed and in path
%% - Test data generated by Katharsis Python script
%%
%% Author: porfanid
%% Version: 1.0

function matlab_comparison_tests()
    % Main function to run all MATLAB comparison tests
    
    fprintf('Starting MATLAB/EEGLAB Comparison Tests...\n');
    
    % Check if EEGLAB is available
    if ~exist('eeglab', 'file')
        error('EEGLAB not found. Please install EEGLAB and add to MATLAB path.');
    end
    
    % Start EEGLAB (suppress GUI)
    eeglab('nogui');
    
    % Set test data directory
    test_data_dir = fullfile(pwd, 'tests', 'matlab_comparison_data');
    if ~exist(test_data_dir, 'dir')
        error('Test data directory not found: %s', test_data_dir);
    end
    
    fprintf('Using test data directory: %s\n', test_data_dir);
    
    try
        % Run filtering comparison tests
        test_highpass_filter(test_data_dir);
        test_bandpass_filter(test_data_dir);
        test_notch_filter(test_data_dir);
        
        % Run referencing comparison tests
        test_average_reference(test_data_dir);
        test_common_reference(test_data_dir);
        
        % Run complete preprocessing pipeline test
        test_full_preprocessing(test_data_dir);
        
        fprintf('\n✅ All MATLAB comparison tests completed successfully!\n');
        fprintf('📊 Results saved in: %s\n', test_data_dir);
        fprintf('🔄 Now re-run Python tests to compare results.\n');
        
    catch ME
        fprintf('❌ Error during MATLAB tests: %s\n', ME.message);
        rethrow(ME);
    end
end

function test_highpass_filter(test_data_dir)
    %% Test high-pass filter comparison with pop_eegfilt
    
    fprintf('\nTesting high-pass filter...\n');
    
    % Load test data
    test_file = fullfile(test_data_dir, 'highpass_test.mat');
    if ~exist(test_file, 'file')
        error('Test data file not found: %s', test_file);
    end
    
    data = load(test_file);
    params = load(fullfile(test_data_dir, 'highpass_filter_params.mat'));
    
    % Create EEGLAB dataset structure
    EEG = create_eeglab_dataset(data);
    
    % Apply EEGLAB high-pass filter
    % pop_eegfilt(EEG, locutoff, hicutoff, filtorder, revfilt, usefft, plotfreqz)
    EEG_filtered = pop_eegfilt(EEG, params.freq_low, 0, [], 0, 0, 0);
    
    % Extract filtered data
    filtered_data = EEG_filtered.data;
    
    % Save results for Python comparison
    results_file = fullfile(test_data_dir, 'highpass_test_matlab_results.mat');
    save(results_file, 'filtered_data', 'EEG_filtered');
    
    fprintf('  ✓ High-pass filter results saved to: %s\n', results_file);
    
    % Calculate some metrics
    original_power = mean(EEG.data(:).^2);
    filtered_power = mean(filtered_data(:).^2);
    fprintf('  📊 Original RMS: %.6f, Filtered RMS: %.6f\n', ...
            sqrt(original_power), sqrt(filtered_power));
end

function test_bandpass_filter(test_data_dir)
    %% Test band-pass filter comparison
    
    fprintf('\nTesting band-pass filter...\n');
    
    % Load test data
    data = load(fullfile(test_data_dir, 'bandpass_test.mat'));
    params = load(fullfile(test_data_dir, 'bandpass_filter_params.mat'));
    
    % Create EEGLAB dataset
    EEG = create_eeglab_dataset(data);
    
    % Apply EEGLAB band-pass filter (alpha band: 8-12 Hz)
    EEG_filtered = pop_eegfilt(EEG, params.freq_low, params.freq_high, [], 0, 0, 0);
    
    filtered_data = EEG_filtered.data;
    
    % Save results
    results_file = fullfile(test_data_dir, 'bandpass_test_matlab_results.mat');
    save(results_file, 'filtered_data', 'EEG_filtered');
    
    fprintf('  ✓ Band-pass filter results saved\n');
    
    % Calculate alpha band power
    [psd, freqs] = pwelch(filtered_data(1,:), [], [], [], data.sfreq);
    alpha_idx = freqs >= 8 & freqs <= 12;
    alpha_power = mean(psd(alpha_idx));
    fprintf('  📊 Alpha band power: %.6f\n', alpha_power);
end

function test_notch_filter(test_data_dir)
    %% Test notch filter for line noise removal
    
    fprintf('\nTesting notch filter...\n');
    
    % Load test data
    data = load(fullfile(test_data_dir, 'notch_test.mat'));
    params = load(fullfile(test_data_dir, 'notch_filter_params.mat'));
    
    % Create EEGLAB dataset
    EEG = create_eeglab_dataset(data);
    
    % Apply EEGLAB notch filter
    % For 50 Hz notch, we use a narrow band-stop filter
    notch_width = 2; % Hz
    low_freq = params.freq_notch - notch_width/2;
    high_freq = params.freq_notch + notch_width/2;
    
    % Apply band-stop filter (revfilt = 1 for band-stop)
    EEG_filtered = pop_eegfilt(EEG, low_freq, high_freq, [], 1, 0, 0);
    
    filtered_data = EEG_filtered.data;
    
    % Save results
    results_file = fullfile(test_data_dir, 'notch_test_matlab_results.mat');
    save(results_file, 'filtered_data', 'EEG_filtered');
    
    fprintf('  ✓ Notch filter results saved\n');
    
    % Calculate line noise reduction
    [psd_orig, freqs] = pwelch(EEG.data(1,:), [], [], [], data.sfreq);
    [psd_filt, ~] = pwelch(filtered_data(1,:), [], [], [], data.sfreq);
    
    [~, noise_idx] = min(abs(freqs - params.freq_notch));
    power_orig = psd_orig(noise_idx);
    power_filt = psd_filt(noise_idx);
    
    reduction_db = 10 * log10(power_orig / power_filt);
    fprintf('  📊 Line noise reduction: %.1f dB\n', reduction_db);
end

function test_average_reference(test_data_dir)
    %% Test average reference with pop_reref
    
    fprintf('\nTesting average reference...\n');
    
    % Load test data
    data = load(fullfile(test_data_dir, 'average_ref_test.mat'));
    
    % Create EEGLAB dataset
    EEG = create_eeglab_dataset(data);
    
    % Apply average reference
    % pop_reref(EEG, ref, 'exclude', exclude, 'keepref', keepref)
    EEG_reref = pop_reref(EEG, []);  % Empty array = average reference
    
    referenced_data = EEG_reref.data;
    
    % Save results
    results_file = fullfile(test_data_dir, 'average_ref_test_matlab_results.mat');
    save(results_file, 'referenced_data', 'EEG_reref');
    
    fprintf('  ✓ Average reference results saved\n');
    
    % Verify average reference (mean across channels should be ~0)
    channel_means = mean(referenced_data, 1);
    max_mean = max(abs(channel_means));
    fprintf('  📊 Max channel mean after avg ref: %.2e\n', max_mean);
end

function test_common_reference(test_data_dir)
    %% Test common reference (single electrode)
    
    fprintf('\nTesting common reference...\n');
    
    % Load test data
    data = load(fullfile(test_data_dir, 'common_ref_test.mat'));
    params = load(fullfile(test_data_dir, 'common_ref_params.mat'));
    
    % Create EEGLAB dataset
    EEG = create_eeglab_dataset(data);
    
    % Find reference channel index
    ref_channel = params.ref_channels;  % Should be 'Cz'
    ref_idx = find(strcmp(EEG.chanlocs, ref_channel), 1);
    if isempty(ref_idx)
        % Find by channel name in ch_names
        ref_idx = find(strcmp(data.ch_names, ref_channel), 1);
    end
    
    if isempty(ref_idx)
        error('Reference channel %s not found', ref_channel);
    end
    
    % Apply common reference
    EEG_reref = pop_reref(EEG, ref_idx);
    
    referenced_data = EEG_reref.data;
    
    % Save results
    results_file = fullfile(test_data_dir, 'common_ref_test_matlab_results.mat');
    save(results_file, 'referenced_data', 'EEG_reref');
    
    fprintf('  ✓ Common reference results saved\n');
    fprintf('  📊 Reference channel: %s (index %d)\n', ref_channel, ref_idx);
end

function test_full_preprocessing(test_data_dir)
    %% Test complete preprocessing pipeline
    
    fprintf('\nTesting full preprocessing pipeline...\n');
    
    % Load test data
    data = load(fullfile(test_data_dir, 'full_preprocessing_test.mat'));
    params = load(fullfile(test_data_dir, 'full_preprocessing_params.mat'));
    
    % Create EEGLAB dataset
    EEG = create_eeglab_dataset(data);
    
    % Step 1: High-pass filter
    fprintf('  Applying high-pass filter (%.1f Hz)...\n', params.highpass_freq);
    EEG = pop_eegfilt(EEG, params.highpass_freq, 0, [], 0, 0, 0);
    
    % Step 2: Low-pass filter  
    fprintf('  Applying low-pass filter (%.1f Hz)...\n', params.lowpass_freq);
    EEG = pop_eegfilt(EEG, 0, params.lowpass_freq, [], 0, 0, 0);
    
    % Step 3: Notch filter
    fprintf('  Applying notch filter (%.1f Hz)...\n', params.notch_freq);
    notch_width = 2;
    low_freq = params.notch_freq - notch_width/2;
    high_freq = params.notch_freq + notch_width/2;
    EEG = pop_eegfilt(EEG, low_freq, high_freq, [], 1, 0, 0);
    
    % Step 4: Bad channel detection (simplified - just mark channels with excessive variance)
    if params.detect_bad_channels
        fprintf('  Detecting bad channels...\n');
        channel_vars = var(EEG.data, 0, 2);
        median_var = median(channel_vars);
        bad_channels = find(channel_vars > 5 * median_var | channel_vars < 0.2 * median_var);
        
        if ~isempty(bad_channels)
            fprintf('    Found %d bad channels: ', length(bad_channels));
            for i = 1:length(bad_channels)
                fprintf('%s ', data.ch_names{bad_channels(i)});
            end
            fprintf('\n');
            
            % Simple interpolation (replace with channel average)
            if params.interpolate_bad_channels
                fprintf('  Interpolating bad channels...\n');
                for i = 1:length(bad_channels)
                    ch_idx = bad_channels(i);
                    % Find neighboring channels (simplified)
                    good_channels = setdiff(1:EEG.nbchan, bad_channels);
                    EEG.data(ch_idx, :) = mean(EEG.data(good_channels, :), 1);
                end
            end
        else
            fprintf('    No bad channels detected\n');
        end
    end
    
    % Step 5: Re-referencing
    fprintf('  Applying %s reference...\n', params.reference_type);
    if strcmp(params.reference_type, 'average')
        EEG = pop_reref(EEG, []);
    end
    
    % Extract final processed data
    processed_data = EEG.data;
    
    % Save results
    results_file = fullfile(test_data_dir, 'full_preprocessing_test_matlab_results.mat');
    save(results_file, 'processed_data', 'EEG');
    
    fprintf('  ✓ Full preprocessing results saved\n');
    
    % Calculate final statistics
    original_rms = sqrt(mean(data.data(:).^2));
    processed_rms = sqrt(mean(processed_data(:).^2));
    fprintf('  📊 Original RMS: %.6f, Processed RMS: %.6f\n', original_rms, processed_rms);
end

function EEG = create_eeglab_dataset(data)
    %% Create EEGLAB dataset structure from test data
    
    % Initialize EEGLAB dataset
    EEG = eeg_emptyset();
    
    % Set basic parameters
    EEG.data = data.data;
    EEG.setname = 'Test Dataset';
    EEG.nbchan = data.n_channels;
    EEG.pnts = data.n_samples;
    EEG.trials = 1;
    EEG.srate = data.sfreq;
    EEG.times = data.times * 1000; % Convert to milliseconds
    EEG.xmin = 0;
    EEG.xmax = data.times(end);
    
    % Set channel names
    for i = 1:length(data.ch_names)
        EEG.chanlocs(i).labels = data.ch_names{i};
    end
    
    % Check dataset consistency
    EEG = eeg_checkset(EEG);
end

%% Run the main function if called directly
if ~isempty(getCurrentTask())
    matlab_comparison_tests();
end